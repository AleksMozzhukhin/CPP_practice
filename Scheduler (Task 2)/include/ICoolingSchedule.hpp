// include/ICoolingSchedule.hpp
#pragma once

#include <cstddef>

namespace sched {

    /**
     * @brief Абстрактный интерфейс закона охлаждения (схемы изменения температуры)
     * для алгоритма имитации отжига.
     *
     * Интерпретация:
     *   - Температура T управляет вероятностью приёмки ухудшающих шагов.
     *   - На каждой итерации имитации отжига температура должна "охлаждаться"
     *     по некоторому правилу (геометрическому, линейному, Коши и т.д.).
     *
     * Требования:
     *   - current_temperature() возвращает T_k (текущую температуру).
     *   - next_step() переводит схему к T_{k+1}.
     *   - reset() возвращает схему в начальное состояние (T = T0, итератор шага = 0).
     *
     * Замечания по устойчивости:
     *   - Реализации обязаны гарантировать T > 0 (строго положительная),
     *     иначе формула exp(-Δ/T) теряет смысл. Если по формуле получается
     *     нечто неположительное, реализация должна зажать температуру в
     *     некий очень малый положительный минимум (например, 1e-12).
     */
    class ICoolingSchedule {
    public:
        virtual ~ICoolingSchedule() = default;

        /**
         * @brief Текущая температура T_k.
         */
        virtual double current_temperature() const = 0;

        /**
         * @brief Переход к следующему шагу охлаждения (T_{k+1}).
         *
         * Обычно вызывается на каждой итерации SA-цикла.
         */
        virtual void next_step() = 0;

        /**
         * @brief Сбросить состояние охлаждения (вернуться к начальному T0).
         */
        virtual void reset() = 0;
    };

} // namespace sched

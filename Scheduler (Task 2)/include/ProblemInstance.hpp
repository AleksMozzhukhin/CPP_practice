// include/ProblemInstance.hpp
#pragma once

#include <vector>
#include <string>
#include <random>
#include <cstdint>

namespace sched {

/**
 * @brief Описание экземпляра задачи расписания.
 *
 * Формально:
 *  - M: число одинаковых процессоров (M >= 1)
 *  - N: число независимых работ (N >= 1)
 *  - p[i]: длительность i-й работы, i = 0..N-1, p[i] >= 1
 *
 * Требования соответствуют формальной постановке:
 *  - все работы независимы;
 *  - прерывания выполнения не допускаются;
 *  - каждая работа должна быть назначена ровно одному процессору.
 */
struct ProblemInstance {
    int M{};                 // число процессоров
    int N{};                 // число работ
    std::vector<int> p;      // длительности работ, размер N, p[i] >= 1

    ProblemInstance() = default;

    ProblemInstance(int M_, int N_, std::vector<int> p_)
        : M(M_), N(N_), p(std::move(p_)) {}
};


/**
 * @brief Загрузка экземпляра задачи из CSV-файла.
 *
 * Поддерживаемый формат CSV (без заголовков):
 *
 * Строка 1:
 *     M,N
 *
 * Строка 2:
 *     p0,p1,p2,...,p{N-1}
 *
 * Условия:
 *  - M >= 1, N >= 1
 *  - количество длительностей во второй строке должно быть равно N
 *  - каждая длительность должна быть целым числом >= 1
 *
 * Пример:
 *     4,10
 *     3,1,7,2,5,4,4,9,6,2
 *
 * @param path        Путь к CSV-файлу.
 * @param out         Экземпляр задачи, в который будут загружены данные.
 * @param error_msg   В случае ошибки сюда записывается человеко-читаемое описание.
 *
 * @return true, если файл успешно прочитан и проверен; false иначе.
 */
bool loadFromCSV(const std::string& path,
                 ProblemInstance& out,
                 std::string& error_msg);


/**
 * @brief Сохранение экземпляра задачи в CSV-файл в формате, совместимом с loadFromCSV().
 *
 * Формат вывода идентичен описанному выше.
 *
 * @param inst        Экземпляр задачи.
 * @param path        Путь к целевому файлу.
 * @param error_msg   В случае ошибки — описание.
 *
 * @return true при успехе; false при неудаче (ошибка записи файла и т.п.).
 */
bool saveToCSV(const ProblemInstance& inst,
               const std::string& path,
               std::string& error_msg);


/**
 * @brief Генерация случайного экземпляра задачи.
 *
 * Для каждого i = 0..N-1 длительность p[i] равномерно выбирается
 * из целого диапазона [p_min, p_max], p_min >= 1.
 *
 * Данный генератор используется утилитой generator, а также может применяться
 * при автоматическом исследовании производительности.
 *
 * @param M       Число процессоров (>=1).
 * @param N       Число работ (>=1).
 * @param p_min   Минимальная длительность работы (>=1).
 * @param p_max   Максимальная длительность работы (>=p_min).
 * @param rng     Генератор случайных чисел (mt19937_64), передаётся снаружи
 *                для детерминируемости при фиксированном seed.
 *
 * @return Сгенерированный экземпляр задачи.
 *
 * Замечание: функция бросает std::invalid_argument при заведомо некорректных
 * аргументах (например, M <= 0 или p_min < 1).
 */
ProblemInstance generateRandomInstance(int M,
                                       int N,
                                       int p_min,
                                       int p_max,
                                       std::mt19937_64& rng);

} // namespace sched
